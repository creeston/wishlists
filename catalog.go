// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package 


import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"be_BY": &dictionary{index: be_BYIndex, data: be_BYData },
		"en_GB": &dictionary{index: en_GBIndex, data: en_GBData },
		"pl_PL": &dictionary{index: pl_PLIndex, data: pl_PLData },
		"ru_RU": &dictionary{index: ru_RUIndex, data: ru_RUData },
		
	}
	fallback := language.MustParse("en-GB")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
}



var be_BYIndex = []uint32{ // 1 elements
0x00000000,
}// Size: 28 bytes



const be_BYData string = ""


var en_GBIndex = []uint32{ // 1 elements
0x00000000,
}// Size: 28 bytes



const en_GBData string = ""


var pl_PLIndex = []uint32{ // 1 elements
0x00000000,
}// Size: 28 bytes



const pl_PLData string = ""


var ru_RUIndex = []uint32{ // 1 elements
0x00000000,
}// Size: 28 bytes



const ru_RUData string = ""


// Total table size 112 bytes (0KiB); checksum: 1B8D6595
